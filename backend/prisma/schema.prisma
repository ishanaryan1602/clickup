generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// define enum
enum Role {
  USER
  ADMIN
}

enum Status {
  TO_DO
  IN_PROGRESS
  DEV_FIXED
  QA_DONE
  DEPLOYED_TO_UAT
  BUG_REOPENED
  DEPLOYED_TO_PROD
}

enum TaskTypeEnum {
  TASK
  MILESTONE
  BUG
  FEATURE_REQUEST
  FORM_RESPONSE
  MEETING_NOTE
  SUBTASK
  USER_STORY
}

// define model
model User {
  user_id   String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  refresh_token RefreshToken?
  assignees     Assignee[]
}

model RefreshToken {
  id            String   @id @default(uuid())
  refresh_token String   @unique
  user_id       String   @unique
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now()) @updatedAt

  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model Task {
  task_id      String   @id @default(uuid())
  title        String
  description  String?
  status       Status   @default(TO_DO)
  due_date     DateTime?
  task_type    TaskTypeEnum @default(TASK)
  assignees    Assignee[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  

}

model Assignee {
  id         String   @id @default(uuid())
  task_id    String
  user_id    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  task Task @relation(fields: [task_id], references: [task_id], onDelete: Cascade)
  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}